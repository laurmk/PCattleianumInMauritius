///////////////////////////////////////////
///// Sentinel-2 Cloud-Free Composite /////
//////////////////////////////////////////

////User inputs////

//01 - Year of composite image.
var year = 2018

//02 - Start date of image collection in the form of 'YYYY-MM-DD' with quotes.
var start = '2018-04-29'

//03 - End date of image collection in the form of 'YYYY-MM-DD' with quotes.
var end = '2018-07-22'

//04 - Import BRGNP boundaries from fusion table.
// Note: After creating table on https://fusiontables.google.com , click 'File' then 'About this table', then copy ID field
// and past below in the form of: ee.FeatureCollection('ft:PASTE ID HERE').
var bounds = ee.FeatureCollection('ft:1HMbXd2NR6hjhtH6VnFR2rs-AH_kqqfMaw9GEHCll');

//05 - Max cloudy pixel percent of individual images; recommended '100'.
var max = 100

//06 - Export image to Google Drive? yes = 1; no = 0
var expImg = 1

//No further inputs required; click 'run'.
//After running, to complete each export task, click 'Tasks' then 'Run' next to the task, then 'Run' in the export window.



///////////////////////////////////////////////////
///// Perform Sentinel-2 Cloud-Free Composite /////
//////////////////////////////////////////////////

//Following code, except 'Water masking', 
// acquired from ( https://groups.google.com/d/msg/google-earth-engine-developers/i63DS-Dg8Sg/fUXHqHb7BgAJ ):

// *******************************************************************************************
//  * Purpose:  Satellite data mosaic
//  * Authors:   Guido Ceccherini, Astrid Verhegghen, Simonetti Dario
// 
// The code is the Sentinel 2 adaptation of the Landsat-based Phenology Based Synthesis Classification Using Google Earth Engine
// available at http://forobs.jrc.ec.europa.eu/products/software/
//
// If you find this code useful for your mapping activity, please cite the reference publication:
// Simonetti, D.; Simonetti, E.; Szantoi, Z.; Lupi, A.; Eva, H.D., "First Results From the Phenology-Based Synthesis Classifier Using Landsat 8 Imagery," Geoscience and Remote Sensing Letters, IEEE , vol.12, no.7, pp.1496,1500, July 2015 doi: 10.1109/LGRS.2015.2409982
// availavble at: http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=7061922


// THE CODE IS PROVIDED WITHOUT WARRANTY THAT THEY WILL BE ERROR FREE OR MEET YOUR REQUIREMENTS.
// THERE IS NO WARRANTY OF ANY KIND AS TO THE RESULTS OBTAINED, OR THE ACCURACY OR RELIABILITY,
// VALIDITY OR COMPLETENESS OF ANY INFORMATION OBTAINED. ANY EXECUTION IS AT YOUR OWN RISK,
// AND YOU ARE SOLELY RESPONSIBLE FOR ANY DAMAGE DONE TO YOUR COMPUTER SYSTEM OR LOSS OF DATA 
// WHICH MAY RESULT FROM SUCH CODE.

// Please refer to Google Earth Engine Terms of Service at https://earthengine.google.org/terms
//*********************************************************************************************


// --------------------------------------------------------------------------------------------------------
//  ----------  Date OPTIONS 
// -------------------------------------
var start_date = start;   // to be defined 
var end_date = end;   // to be defined
// --------------------------------------------------------- -----------------------------------------------
//  ----------  Country OPTIONS 
// -------------------------------------
var countryname = 'Mauritius';
// --------------------------------------------------------------------------------------------------------
//  ----------  Classify a box of DELTAxy OPTIONS 
// -------------------------------------
var use_centerpoint=0;        // set to 1 to classify a box of DELTAxy; Location= Map.getCenter() 
//Map.setCenter(106.26, 15.835) // Ketta (Congo)  --> change or comment to use a dynamic map center  
var DELTAx = 1;               // Long size   
var DELTAy = 1;               // Lat  size 

var max_cloud_percent = max;    // remove cloudy images but i would suggest using any acquisition
// --------------------------------------------------------------------------------------------------------
//  ----------  EXPORT OPTIONS 
// --------------------------------------------------------------------------------------------------------
//var Google_drive_root_folder= 'GEE_classification'
var export_map = expImg;    // Export PBS classification to your GDrive
var export_tiles = 1;  // Export PBS classification in pieces if too big 2 = 4 tiles; 3 = 9 tiles 
 

//////////////////////////////////////////////////////////////
//1st step select country
//////////////////////////////////////////////////////////////


  var country = ee.FeatureCollection('ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw')
                  .filterMetadata('Country', 'Contains',countryname );
              
var bbox=(country.geometry().bounds().coordinates().getInfo());
              
var AOI= ee.Geometry.Polygon(bounds)
        /*ee.Geometry.Polygon([[
                bbox[0][0],bbox[0][1],bbox[0][2],bbox[0][3],bbox[0][4]
                ]]);
        */        
// Select the country boundary 
var filteredCountries = ee.Filter.inList('name', [countryname]);
// Filter the countries fusion table by country
var roi = country.filter(filteredCountries);

 //////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////
 
 
 //////////////////////////////////////////////////////////////
// Sentinel 2 using the PBS CLoud Mask
///////////////////////////////////////////////////////////////


var CX=Map.getCenter().coordinates().getInfo()[0];
var CY=Map.getCenter().coordinates().getInfo()[1];   

// ------------ Classification of a country: possible but resources demanding 
// ------------ Be careful about time frame and country size 


//---------------------------------------------------------------------------------------------------------


// --------------------------------------------------------------------------------------------------------
// ----------- EXTRA SETTING 
// --------------------------------------------------------------------------------------------------------
var debug_mode = 0;  // add all layers to the OUT PBS classification to better understand class proportions --> Pixels info console
var EVG_domain = 1;   // set to 1 if on tropics / dense evergreen -> recodes bright forest to dark (haze contamination) 

var clouds_morpho_filter = 0;  // enable cloud / shadow buffering     --- too be better implemented, time consuming 
var clouds_filter_size = 500;  // add buffer in meters  aroud clouds  --- too be better implemented
var shadow_filter_size = 500;  // add buffer in meters aroud shadows  --- too be better implemented

// --------------------------------------------------------------------------------------------------------

         print("Running classification");
            //--------------------------------------------------------------------------------------
         
          if (use_centerpoint === 0){
              var country = ee.FeatureCollection('ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw')
                  .filterMetadata('Country', 'Contains',countryname );
                  
              //Map.addLayer(country); 
              var bbox=(country.geometry().bounds().coordinates().getInfo());
              
              var AOI=ee.Geometry.Polygon([[
                bbox[0][0],bbox[0][1],bbox[0][2],bbox[0][3],bbox[0][4]
                ]]);
               
               Map.centerObject(AOI, 10);  
          }    
          
          
          else {
             
             countryname="MyMap";
             var AOI =ee.Geometry.Polygon([[
                [CX-DELTAx, CY-DELTAy],[CX+DELTAx,CY-DELTAy],[CX+DELTAx,CY+DELTAy],[CX+DELTAx,CY+DELTAy],[CX-DELTAx, CY+DELTAy]
                ]]);
                Map.addLayer(AOI);
          }
           
          
          print(AOI);
          //
         
          
          
          var collectionS2 = ee.ImageCollection('COPERNICUS/S2').filterDate(start_date,end_date)  //
                         .filterMetadata('CLOUDY_PIXEL_PERCENTAGE',"less_than",max_cloud_percent)
                         .filterBounds(country)
                         //.filterMetadata('system:asset_size', 'greater_than', 900000000)
                         .map(function(image){return PINO1(image.clip(AOI),['B2','B3','B4','B8','B11','B12','QA60','B1','B9'])});   
          
          print(collectionS2);
         
          
          //Map.addLayer(collectionS2,{},'S2 composite raw');
          var compositeJRC = collectionS2.median().clip(bounds).divide(10000);
          
          ///////////////////////
          //// Water masking ////
          ///////////////////////
          
          //Create water mask using reflectance in band 6
          var datamask1 = compositeJRC.select('B6');
          var mask1 = datamask1.gte(0.045);
          var compositeJRC = compositeJRC.updateMask(mask1);
          
          // Load or import the Hansen et al. forest change dataset.
          var hansenImage = ee.Image('UMD/hansen/global_forest_change_2017_v1_5');
          
          // Select the land/water mask.
          var datamask = hansenImage.select('datamask');
          
          // Create a binary mask.
          var mask = datamask.eq(1);
          
          // Update the composite mask with the water mask.
          var compositeJRC = compositeJRC.updateMask(mask);
          
          Map.addLayer(compositeJRC, {bands:['B11','B8','B4'], min:0, max:0.3}, 'S2 composite JRC');

          //############################################################
          //###############  DEBUG mode    #############################
          //############################################################
          if (debug_mode ==1 ){ 
          Map.addLayer(PBS_OUT, Watervis, 'Water_L8',true);  // e.g. Add only water  classes
          }  

          //############################################################
          //###############  Export loop  ##############################
          //#############################################################
          
          if (export_map == 1){
                    print(countryname);
                    Export.image.toAsset({
                          image: compositeJRC,
                          description: 'Export' + year + 'ImagetoAsset',
                          assetId: countryname + year,
                          region: bounds,
                         //folder:Google_drive_root_folder, 
                         scale:10,
                         //maxPixels: 1e13
                        }); 
                    
                    
                  }

function rgb(r,g,b){
          var bin = r << 16 | g << 8 | b;
          return (function(h){
          return new Array(7-h.length).join("0")+h
          })(bin.toString(16).toUpperCase())
}

var CLvis={      'min': 0,
                 'max': 100,
                 'gamma': 2};

var L8vis = {'bands': 'B7,B5,B4',
                 'min': 0,
                 'max': 1,
                 'gamma': 2};
                 
var L5vis = {'bands': '70,50,20',
                 'min': 0,
                 'max': 1,
                 'gamma': 2};                 
                 
var Vis100 = {'bands': 'Class',
                 'min': 0,
                 'max': 100}
                 

var mypalette=[
      rgb(20,20,20),    //0  no data 
      rgb(255,255,255), //1  Clouds
      rgb(175,238,238), //2  Temporary snow
      rgb(0,255,255),   //3  Snow
        rgb(0,0,205),   //4   WATER  used in single date -----
        rgb(0,0,205),   //5   WATER  used in single date -----
      rgb(200,190,220), //6  Water + DRY 
      rgb(100,149,237) ,//7  Water -----
      rgb(0,0,205),     //8  Water
      rgb(150,250,200), //9  WATER+FOREST -----
      rgb(10,108,0) ,   //10  EVG DENSE -----
      rgb(0,128,0) ,    //11  EVG DENSE -----
      rgb(34,139,34) ,  //12  EVG DENSE -----
      rgb(50,205,50),   //13  EVG DENSE/SHRUB -----
      rgb(190,255,90) , //14  EVG GRASS -----
      rgb(30,250,30),   //15  EVG OPEN
      rgb(120,160,50)  ,//16  EVG SHRUB -----
       'FF0000',        //17  EMPTY -----
       'FF0000',        //18  EMPTY -----
        'FF0000',       //19  EMPTY -----
      rgb(160,225,150), //20  DEC Close Humid -----
      rgb(210,250,180) ,//21  DEC Open Humid -----
      rgb(215,238,158), //22  EMPTY -----
        'FF0000',       //23  EMPTY -----
        'FF0000',       //24  EMPTY -----
      rgb(128,118,26) ,  //25  DEC Close dry -----rgb(128,118,26)
      rgb(140,150,30) , //26  DEC Open dry -----rgb(140,150,30)
      rgb(153,193,193), //27  IRRIG AGRI -----
      rgb(216,238,160) ,//28  DEC SHRUB dense humid
      rgb(237,255,193) ,//29  DEC SHRUB  -----
      rgb(240,250,220), //30  DEC SHRUB sparse
      rgb(227,225,170) ,//31  GRASS + bush -----
      rgb(212,189,184), //32  GRASS -----
      rgb(255,255,0),   //33  EMPTY -----
      rgb(255,225,255), //34  SOIL+GRASS -----
      rgb(140,5,198),   //35  SOIL -----
      rgb(158,132,123), //36  DARK SOIL -----
        'FF0000', //37  EMPTY -----
        'FF0000', //38  EMPTY -----
        'FF0000', //39  EMPTY -----
      rgb(40,70,20),    //40  Shawodw on vegetation
      rgb(145,0,10),    //41  Dark soil 
      rgb(100,100,100), //42  Shawodw mainly on soil 
       '8B4513' //43  test soil -----
  ];

                 
var CLASSvis = {
  'bands':'Class',
  min: 0,
  max: 43,
  palette: mypalette
};
var Watervis = {'bands': 'WATER',
                 'min': 0,
                 'max': 100,
   palette: [
      '000000', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
      '74A901', '66A000', '529400', '3E8601', '207401', '056201',
      '004C00', '023B01', '012E01', '011D01', '011301'
  ]
};


//-------------------------------------------------------------------------------------------------------------------------------
//  ----------     MY Single Date Classification ONLY MAIN CLASSED + WATER        -----------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------

// INPUT 1: image to be classified 
// INPUT 2: bands combination (B,G,R,NIR,SWIR1,SWIR2) -> Landsat TM = (1,2,3,4,5,7)
// OUT :  classified input(same number of layers); Class code is not the same as the PBS  


function PINO1(image,BANDS){
    
    var th_NDVI_MAX_WATER=0;
    var BLU=image.select(BANDS[0]).divide(10000);
    var GREEN=image.select(BANDS[1]).divide(10000);
    var RED=image.select(BANDS[2]).divide(10000);
    var NIR=image.select(BANDS[3]).divide(10000);
    var SWIR1=image.select(BANDS[4]).divide(10000);
    var SWIR2=image.select(BANDS[5]).divide(10000);
    
    var ESA_filter = image.select(BANDS[6])
    var B1 = image.select(BANDS[7]).divide(10000);
    var B9 = image.select(BANDS[8]).divide(10000);

    var OUT=ee.Image(0);
    var OUT2=ee.Image(0);
    var OUT3=ee.Image(0);
    
    var th_NDVI_SATURATION=0.0037;
    var th_NDVI_MIN_CLOUD_BARE=0.35;
    var th_NDVI_MIN_VEGE=0.45;
    
    var th_SHALLOW_WATER=-0.1;
    var th_RANGELAND=0.50;
    var th_GRASS=0.55;
    var th_SHRUB=0.65;
    var th_TREES=0.78 ;
    //var th_TREES=0.85 ;
    
   
     
    var min123=BLU.min(GREEN).min(RED);
     
    var min1234=min123.min(NIR);
    var min234=GREEN.min(RED).min(NIR);
    
    var max234=GREEN.max(RED).max(NIR);
    var max1234=max234.max(BLU);
    
    var max57=SWIR1.max(SWIR2);
    var max457=max57.max(NIR);
    
    var max123457= max1234.max(max57);
    
    
    var BLUgtGREEN  = BLU.gt(GREEN);
    var BLUgteGREEN = BLU.gte(GREEN);
    var BLUlteNIR   = BLU.lte(NIR);
    
    var GREENgtRED  = GREEN.gt(RED);
    var GREENlteRED = GREEN.lte(RED);
    var GREENgteRED = GREEN.gte(RED);
    var REDlteNIR= RED.lte(NIR);
    
    var REDsubtractGREEN = (RED.subtract(GREEN)).abs();
    var BLUsubtractNIR   = BLU.subtract(NIR)
    
    var BLUgtGREENgtRED=BLUgtGREEN.and(GREENgtRED)
    
    var growing14=(BLU.lte(GREEN)).and(GREENlteRED).and(REDlteNIR);
    var growing15=growing14.and(NIR.lte(SWIR1));
    
    var decreasing2345=(GREENgteRED).and(RED.gte(NIR)).and(NIR.gte(SWIR1));
    
    
    var SATURATION=(max234.subtract(min234)).divide(max234);

    var WETNESS=BLU.multiply(-1);// image.expression('byte(b("'+BANDS[0]+'")*255)*0.2626 + byte(b("'+BANDS[1]+'")*255)*0.21 + byte(b("'+BANDS[2]+'")*255)*0.0926 + byte(b("'+BANDS[3]+'")*255)*0.0656 - byte(b("'+BANDS[4]+'")*255)*0.7629 - byte(b("'+BANDS[5]+'")*255)*0.5388');
    
    var NDVI=(NIR.subtract(RED)).divide(NIR.add(RED));
    var NDSI=(BLU.subtract(SWIR1)).divide(GREEN.add(SWIR1));
    
    var BRIGTSOIL=((BLU.lt(0.27)).and(growing15)).or((BLU.lt(0.27)).and(growing14).and(  ((NIR.subtract(SWIR1)).gt(0.038)))); 
    
    var WATERSHAPE= ((BLU.subtract(GREEN)).gt(-0.2)).and(decreasing2345).and(WETNESS.gt(0)); //add other cond
    var OTHERWATERSHAPE= (BLUgteGREEN).and(GREENgteRED).and(NIR.gte(RED)).and(SWIR1.lt(NIR)).and(SWIR2.lte(SWIR1)).and(NIR.lt((RED).multiply(1.3)).and(NIR.lt(0.12)).and(SWIR1.lt(RED)).and(NIR.lte(GREEN)).and(NIR.gt(0.039)).and(WETNESS.gt(0))  ); //add other cond  07/10 (add replaced with and  :) and(NIR.lte(GREEN))
    
    var SNOWSHAPE=(min1234.gt(0.30)).and(NDSI.gt(0.65));
    
    var CLOUDSHAPE = ((SNOWSHAPE.eq(0)).and(BRIGTSOIL.eq(0))).and(      //
                  ((max123457.gt(0.47)).and(min1234.gt(0.37))).or(
                    
                    ((min123.gt(0.17)).and((SWIR1).gt(min123))).and(
                          ((SATURATION.gte(0.2)).and(SATURATION.lte(0.4)).and(max234.gte(0.35)) ).or ((NDSI.lt(0.65)).and(max1234.gt(0.30)).and( (NIR.divide(RED)).gte(1.3) ).and((NIR.divide(GREEN)).gte(1.3)).and( (NIR.divide(SWIR1)).gte(0.95)  )) 
                                                                   )
                                                                   
                                                                  ) 
                                                              ) 
    
    min123=0
    
    BRIGTSOIL=0
    SATURATION=0
    decreasing2345=0
    // main groups based on ndvi
    var ndvi_1 = NDVI.lte(th_NDVI_MAX_WATER);
    var ndvi_2 = NDVI.lt(th_NDVI_MIN_VEGE).and(ndvi_1.eq(0));
    var ndvi_3 = NDVI.gte(th_NDVI_MIN_VEGE);
    
    
    //-------------------------------------------------------------------------------------------------------------
		//----------------------  SECTION 1 : WATER  ---------------------------------------------------------
		//-------------------------------------------------------------------------------------------------------------
    
    OUT=(ndvi_1.and(SNOWSHAPE)).multiply(3);
    OUT=OUT.where( (ndvi_1).and(
                    (WATERSHAPE.and(BLU.gt(0.078)).and(GREEN.gt(0.04)).and(GREEN.lte(0.12)).and(max57.lt(0.04))).or(
                    (RED.gte(max457)).and(RED.lte(0.19)).and(RED.gt(0.04)).and(BLU.gt(0.078)).and(max57.lt(0.04))) ),8);
    
    
    OUT=OUT.where(( (ndvi_1).and(BLU.gt(0.94)).and(GREEN.gt(0.94)).and(RED.gt(0.94)).and(NIR.gt(0.94)) ),1);  // TEST CLOUDS L8
                   
		OUT=OUT.where(( (OUT.eq(0)).and(ndvi_1)),8);
    
    
    //-------------------------------------------------------------------------------------------------------------
		//---------------------  SECTION 2 : CLOUDS or SOIL  ---------------------------------------------------------
		//------------------------------------------------------------------------------------------------------------
    
     OUT=OUT.where(( (ndvi_2).and(SNOWSHAPE)),3);
    
     OUT=OUT.where(( (ndvi_2).and(OTHERWATERSHAPE).and(BLU.gt(0.078)).and(max57.lt(0.058))),8 );
    
     OUT=OUT.where(( (ndvi_2).and(
                      CLOUDSHAPE.or(
                      (BLUgtGREENgtRED.and(NIR.gt(0.254)).and( BLU.gt(0.165)).and(NDVI.lt(0.40))).or(
                      (BLUgtGREEN.and(BLU.gt(0.27)).and(GREEN.gt(0.21)).and( REDsubtractGREEN.lte(0.1)).and(NIR.gt(0.35)))).or(
                      (BLU.gt(0.94)).and(GREEN.gt(0.94)).and(RED.gt(0.94)).and(NIR.gt(0.94))))
                      
                      )),1);

    CLOUDSHAPE=0
 
    OUT=OUT.where(( (ndvi_2).and(BLU.lt(0.13)).and(BLUgtGREENgtRED).and(RED.lt(0.05)).and( BLUsubtractNIR.lt(-0.04))     ),40);    //similar 2 cl 42 simplify
     
    OUT=OUT.where(( (OUT.eq(0)).and(ndvi_2).and(WETNESS.gt(5))),8   ); //only at this point to avoid confusion with shadows
    WETNESS=0
   
    OUT=OUT.where(( (ndvi_2).and(BLU.lt(0.13)).and(BLUgtGREENgtRED).and(RED.lt(0.05)).and( BLUsubtractNIR.lt(0.04))        ),42   );
    
    OUT=OUT.where(( (OUT.eq(0)).and(ndvi_2).and(
                    ((BLU.lt(0.14)).and(BLU.gt(0.10)).and(BLUgtGREENgtRED).and(RED.lt(0.06)).and(NIR.lt(0.14)).and( ((NIR).subtract(BLU)).lt(0.02))).or(
                    ( ((((NIR.subtract(GREEN)).abs().lte(0.01)).add( BLUsubtractNIR.gte(0.01))).gt(0)).and(BLUgtGREENgtRED).and(NIR.gte(0.06)) )).or(
                    ( (OUT.eq(0)).and(ndvi_2).and(NDVI.lte(0.09)).and(NIR.lt(0.4)).and(GREENlteRED).and(REDlteNIR)) )
                  )),41);
  
    OUT=OUT.where(( (OUT.eq(0)).and(ndvi_2).and(NDVI.lte(0.20)).and(NIR.gt(0.3)).and(growing14)   ),34 );
     
     
    OUT=OUT.where(( (OUT.eq(0)).and(ndvi_2).and(NDVI.gte(0.35)).and(BLUgteGREEN).and(REDsubtractGREEN.lt(0.04))    ),21 );
     
    OUT=OUT.where(( (OUT.eq(0)).and(ndvi_2).and(NDVI.gte(0.20)).and( REDsubtractGREEN.lt(0.05))   ),30 );
     
    OUT=OUT.where(( (OUT.eq(0)).and(ndvi_2)),31);
      
    REDsubtractGREEN=0
    BLUgteGREEN=0
     
    //-------------------------------------------------------------------------------------------------------------
		//----------------------  SECTION 3 : VEGETATION  -------------------------------------------------------------
		//-------------------------------------------------------------------------------------------------------------
    
    var MyCOND=(ndvi_3).and(NDVI.lt(th_RANGELAND));
    OUT=OUT.where(( (MyCOND).and(NIR.gte(0.15)) ),21);
    OUT=OUT.where(( (MyCOND).and(NIR.lt(0.15))  ),40);
    
    MyCOND=(ndvi_3).and(NDVI.lt(th_GRASS));
    OUT=OUT.where(( (MyCOND).and(BLUlteNIR).and(NIR.lt(0.15))  ),40);
    OUT=OUT.where(( (OUT.eq(0)).and(
                                    ((MyCOND).and(BLUlteNIR)).or( (NDVI.lt(th_SHRUB) ).and(NIR.gt(0.22)))).and(NDSI.lt(-0.35))  ),16);
  
                                    
    OUT=OUT.where(( (MyCOND).and(BLU.gt(NIR)) ),40);
    OUT=OUT.where(( (OUT.eq(0)).and(MyCOND)).and(NDSI.lt(-0.3)),16);                                        
    OUT=OUT.where( (ndvi_3).and(OUT.eq(0)).and(NDSI.gt(-0.25))  ,10);
    
    OUT=OUT.where(((OUT.eq(0)).and(ndvi_3).and(NDVI.gt(th_TREES)) ),9);
    
    OUT=OUT.where(( (OUT.eq(0)).and(NDVI.lt(th_GRASS))),21);
    OUT=OUT.where(( (OUT.eq(0)).and(NDSI.lt(-0.25))),13);
    OUT=OUT.where(( (OUT.eq(0))),16);
    
   // function cloudMask(im) {
  //// Opaque and cirrus cloud masks cause bits 10 and 11 in QA60 to be set,
  //// so values less than 1024 are cloud-free
  //var mask = ee.Image(0).where(im.select('QA60').gte(1024), 1).not();
  //return im.updateMask(mask);
//}
    
    
    // ESA FILTER
    OUT=OUT.where( ESA_filter.gte(1024), 1);
    
    // NIR saturation
    //OUT=OUT.where( NIR.gte(0.3), 1);
    
        // NIR saturation
    //OUT=OUT.where( BLU.gte(0.2), 1);
   
   //OUT = OUT.where(BLU.gte(0.1610).and(B1.gte(0.1500)), 1);
   //OUT = OUT.where(B1.gte(0.1550), 1);
   // NIR saturation
    OUT2=OUT2.where( B1.gte(0.1550).and(BLU.gte(0.2)).and(B9.gt(0.09)), 1);
   
   //OUT = OUT.where(BLU.gte(0.1610).and(B1.gte(0.1500)), 1);
   //OUT2 = OUT2.where(B1.gte(0.1550).and(B9.gt(0.09)), 1);
   
    
  OUT2=OUT2.focal_max(50,'circle','meters',1); 
    
  // OUT = OUT.where(BLU.gte(0.1610).and(B1.gte(0.1500)), 1);
  
  OUT3 = OUT3.where(OUT.eq(1), 1);
  OUT3=OUT3.focal_max(50,'circle','meters',1);
  
   OUT = OUT.where(OUT2.gte(1), 1);
   OUT = OUT.where(OUT3.gte(1), 1);
   
  if (clouds_morpho_filter == 1){
        var CM=((OUT.eq(1)).or(OUT.eq(3)));                                                 // possible clouds 
        var SH=(OUT.gt(41));   //possible shadows 
        CM=CM.focal_max(500,'circle','meters',1);                             
        var CMextent=CM.focal_max(500,'circle','meters',1);                                 // max distance of SH from CL --- better number can be defined usinf sun elevation
        OUT=OUT.where(((OUT.eq(8)).and(CMextent)),42);                                      // recode SH falling in the buffer to final SH class  
        CMextent=0;
        SH=SH.focal_max(500,'circle','meters',1);
        var CM_SH=CM.add(SH.multiply(2)).select([0],["CSM"]);
        OUT=OUT.where(CM_SH.gte(1),1);
    }
   
    //return (OUT.select([0],["Class"]).toByte());
    //return (image.updateMask(OUT.lte(3)));
    //return image.and((OUT.select([0],["Class"]).toByte()));
    return image.mask(OUT.neq(1))
   
}   // SINGLE DATE CLASSIFICATION


print('Composite Image:', compositeJRC)

